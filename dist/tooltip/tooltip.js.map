{"version":3,"sources":["../../src/tooltip/tooltip.ts"],"names":[],"mappings":"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","file":"tooltip.js","sourceRoot":"","sourcesContent":["import {\r\n  Component,\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy,\r\n  Injector,\r\n  Renderer2,\r\n  ComponentRef,\r\n  ElementRef,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  ComponentFactoryResolver,\r\n  NgZone\r\n} from '@angular/core';\r\nimport {listenToTriggers} from '../util/triggers';\r\nimport {positionElements, Placement, PlacementArray} from '../util/positioning';\r\nimport {PopupService} from '../util/popup';\r\nimport {NgbTooltipConfig} from './tooltip-config';\r\n\r\nlet nextId = 0;\r\n\r\n\r\nexport class NgbTooltipWindow {\r\n   placement: Placement = 'top';\r\n   id: string;\r\n\r\n  constructor(private _element: ElementRef, private _renderer: Renderer2) {}\r\n\r\n  applyPlacement(_placement: Placement) {\r\n    // remove the current placement classes\r\n    this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);\r\n    this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());\r\n\r\n    // set the new placement classes\r\n    this.placement = _placement;\r\n\r\n    // apply the new placement\r\n    this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);\r\n    this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ngb-tooltip-window',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class]': '\"tooltip show bs-tooltip-\" + placement.split(\"-\")[0]+\" bs-tooltip-\" + placement',\r\n    'role': 'tooltip',\r\n    '[id]': 'id'\r\n  },\r\n  template: `<div class=\"arrow\"></div><div class=\"tooltip-inner\"><ng-content></ng-content></div>`,\r\n  styles: [`\r\n    :host.bs-tooltip-top .arrow, :host.bs-tooltip-bottom .arrow {\r\n      left: 50%;\r\n    }\r\n\r\n    :host.bs-tooltip-top-left .arrow, :host.bs-tooltip-bottom-left .arrow {\r\n      left: 1em;\r\n    }\r\n\r\n    :host.bs-tooltip-top-right .arrow, :host.bs-tooltip-bottom-right .arrow {\r\n      left: auto;\r\n      right: 1em;\r\n    }\r\n\r\n    :host.bs-tooltip-left .arrow, :host.bs-tooltip-right .arrow {\r\n      top: 50%;\r\n    }\r\n    \r\n    :host.bs-tooltip-left-top .arrow, :host.bs-tooltip-right-top .arrow {\r\n      top: 0.7em;\r\n    }\r\n\r\n    :host.bs-tooltip-left-bottom .arrow, :host.bs-tooltip-right-bottom .arrow {\r\n      top: auto;\r\n      bottom: 0.7em;\r\n    }\r\n  `]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'placement': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\r\n\r\n/**\r\n * A lightweight, extensible directive for fancy tooltip creation.\r\n */\r\n\r\nexport class NgbTooltip implements OnInit, OnDestroy {\r\n  /**\r\n    * Placement of a popover accepts:\r\n    *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\r\n    *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\r\n    * and array of above values.\r\n    */\r\n   placement: PlacementArray;\r\n  /**\r\n   * Specifies events that should trigger. Supports a space separated list of event names.\r\n   */\r\n   triggers: string;\r\n  /**\r\n   * A selector specifying the element the tooltip should be appended to.\r\n   * Currently only supports \"body\".\r\n   */\r\n   container: string;\r\n  /**\r\n   * Emits an event when the tooltip is shown\r\n   */\r\n   shown = new EventEmitter();\r\n  /**\r\n   * Emits an event when the tooltip is hidden\r\n   */\r\n   hidden = new EventEmitter();\r\n\r\n  private _ngbTooltip: string | TemplateRef<any>;\r\n  private _ngbTooltipWindowId = `ngb-tooltip-${nextId++}`;\r\n  private _popupService: PopupService<NgbTooltipWindow>;\r\n  private _windowRef: ComponentRef<NgbTooltipWindow>;\r\n  private _unregisterListenersFn;\r\n  private _zoneSubscription: any;\r\n\r\n  constructor(\r\n      private _elementRef: ElementRef, private _renderer: Renderer2, injector: Injector,\r\n      componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, config: NgbTooltipConfig,\r\n      ngZone: NgZone) {\r\n    this.placement = config.placement;\r\n    this.triggers = config.triggers;\r\n    this.container = config.container;\r\n    this._popupService = new PopupService<NgbTooltipWindow>(\r\n        NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);\r\n\r\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\r\n      if (this._windowRef) {\r\n        this._windowRef.instance.applyPlacement(\r\n            positionElements(\r\n                this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement,\r\n                this.container === 'body'));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Content to be displayed as tooltip. If falsy, the tooltip won't open.\r\n   */\r\n  \r\n  set ngbTooltip(value: string | TemplateRef<any>) {\r\n    this._ngbTooltip = value;\r\n    if (!value && this._windowRef) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  get ngbTooltip() { return this._ngbTooltip; }\r\n\r\n  /**\r\n   * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n   * The context is an optional value to be injected into the tooltip template when it is created.\r\n   */\r\n  open(context?: any) {\r\n    if (!this._windowRef && this._ngbTooltip) {\r\n      this._windowRef = this._popupService.open(this._ngbTooltip, context);\r\n      this._windowRef.instance.id = this._ngbTooltipWindowId;\r\n\r\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbTooltipWindowId);\r\n\r\n      if (this.container === 'body') {\r\n        window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\r\n      }\r\n\r\n      this._windowRef.instance.placement = Array.isArray(this.placement) ? this.placement[0] : this.placement;\r\n\r\n      // apply styling to set basic css-classes on target element, before going for positioning\r\n      this._windowRef.changeDetectorRef.detectChanges();\r\n      this._windowRef.changeDetectorRef.markForCheck();\r\n\r\n      // position tooltip along the element\r\n      this._windowRef.instance.applyPlacement(\r\n          positionElements(\r\n              this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement,\r\n              this.container === 'body'));\r\n\r\n      this.shown.emit();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n   */\r\n  close(): void {\r\n    if (this._windowRef != null) {\r\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\r\n      this._popupService.close();\r\n      this._windowRef = null;\r\n      this.hidden.emit();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n   */\r\n  toggle(): void {\r\n    if (this._windowRef) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the tooltip is currently being shown\r\n   */\r\n  isOpen(): boolean { return this._windowRef != null; }\r\n\r\n  ngOnInit() {\r\n    this._unregisterListenersFn = listenToTriggers(\r\n        this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this),\r\n        this.toggle.bind(this));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._unregisterListenersFn();\r\n    this._zoneSubscription.unsubscribe();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngbTooltip]', exportAs: 'ngbTooltip'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Injector, },\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n{type: NgbTooltipConfig, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'placement': [{ type: Input },],\n'triggers': [{ type: Input },],\n'container': [{ type: Input },],\n'shown': [{ type: Output },],\n'hidden': [{ type: Output },],\n'ngbTooltip': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}