{"version":3,"sources":["../../src/buttons/checkbox.ts"],"names":[],"mappings":"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","file":"checkbox.js","sourceRoot":"","sourcesContent":["import {Directive, forwardRef, Input} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\nimport {NgbButtonLabel} from './label';\r\n\r\nconst NGB_CHECKBOX_VALUE_ACCESSOR = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgbCheckBox),\r\n  multi: true\r\n};\r\n\r\n\r\n/**\r\n * Easily create Bootstrap-style checkbox buttons. A value of a checked button is bound to a variable\r\n * specified via ngModel.\r\n */\r\n\r\nexport class NgbCheckBox implements ControlValueAccessor {\r\n  checked;\r\n\r\n  /**\r\n   * A flag indicating if a given checkbox button is disabled.\r\n   */\r\n   disabled = false;\r\n\r\n  /**\r\n   * Value to be propagated as model when the checkbox is checked.\r\n   */\r\n   valueChecked = true;\r\n\r\n  /**\r\n   * Value to be propagated as model when the checkbox is unchecked.\r\n   */\r\n   valueUnChecked = false;\r\n\r\n  onChange = (_: any) => {};\r\n  onTouched = () => {};\r\n\r\n  set focused(isFocused: boolean) {\r\n    this._label.focused = isFocused;\r\n    if (!isFocused) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  constructor(private _label: NgbButtonLabel) {}\r\n\r\n  onInputChange($event) {\r\n    const modelToPropagate = $event.target.checked ? this.valueChecked : this.valueUnChecked;\r\n    this.onChange(modelToPropagate);\r\n    this.onTouched();\r\n    this.writeValue(modelToPropagate);\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => any): void { this.onChange = fn; }\r\n\r\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._label.disabled = isDisabled;\r\n  }\r\n\r\n  writeValue(value) {\r\n    this.checked = value === this.valueChecked;\r\n    this._label.active = this.checked;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[ngbButton][type=checkbox]',\r\n  host: {\r\n    'autocomplete': 'off',\r\n    '[checked]': 'checked',\r\n    '[disabled]': 'disabled',\r\n    '(change)': 'onInputChange($event)',\r\n    '(focus)': 'focused = true',\r\n    '(blur)': 'focused = false'\r\n  },\r\n  providers: [NGB_CHECKBOX_VALUE_ACCESSOR]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbButtonLabel, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'valueChecked': [{ type: Input },],\n'valueUnChecked': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}