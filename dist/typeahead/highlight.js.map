{"version":3,"sources":["../../src/typeahead/highlight.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,KAAA,EAAkB,uBAAA,EAAuC,MAAM,eAAA,CAAgB;AAClG,OAAO,EAAA,YAAE,EAAa,QAAA,EAAS,MAAM,cAAA,CAAe;AAGpD;IAAA;QAGG,mBAAc,GAAG,eAAe,CAAC;IA0CpC,CAAC;IAtCC,kCAAW,GAAX,UAAY,OAAsB;QAChC,IAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,IAAM,QAAQ,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;QACzC,IAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QACjD,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,MAAI,YAAY,CAAC,MAAM,CAAC,MAAG,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI;gBAC5E,IAAM,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/D,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC;gBAC1B,MAAM,CAAC,YAAY,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAuBH,mBAAC;AAAD,CA7CA,AA6CC;;AAtBM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,eAAe;gBACzB,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,QAAQ,EAAE,oEAAgE;oBACtE,yHAAmH;oBACnH,gBAAgB;gBACpB,MAAM,EAAE,CAAC,6DAIR,CAAC;aACH,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,2BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,2BAAc,GAA2C;IAChE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACpC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;CACzB,CAAC","file":"highlight.js","sourceRoot":"","sourcesContent":["import {Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core';\r\nimport {regExpEscape, toString} from '../util/util';\r\n\r\n\r\nexport class NgbHighlight implements OnChanges {\r\n  parts: string[];\r\n\r\n   highlightClass = 'ngb-highlight';\r\n   result: string;\r\n   term: string;\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const resultStr = toString(this.result);\r\n    const resultLC = resultStr.toLowerCase();\r\n    const termLC = toString(this.term).toLowerCase();\r\n    let currentIdx = 0;\r\n\r\n    if (termLC.length > 0) {\r\n      this.parts = resultLC.split(new RegExp(`(${regExpEscape(termLC)})`)).map((part) => {\r\n        const originalPart = resultStr.substr(currentIdx, part.length);\r\n        currentIdx += part.length;\r\n        return originalPart;\r\n      });\r\n    } else {\r\n      this.parts = [resultStr];\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ngb-highlight',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `<ng-template ngFor [ngForOf]=\"parts\" let-part let-isOdd=\"odd\">` +\r\n      `<span *ngIf=\"isOdd\" class=\"{{highlightClass}}\">{{part}}</span><ng-template [ngIf]=\"!isOdd\">{{part}}</ng-template>` +\r\n      `</ng-template>`,  // template needs to be formatted in a certain way so we don't add empty text nodes\r\n  styles: [`\r\n    .ngb-highlight {\r\n      font-weight: bold;\r\n    }\r\n  `]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'highlightClass': [{ type: Input },],\n'result': [{ type: Input },],\n'term': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}